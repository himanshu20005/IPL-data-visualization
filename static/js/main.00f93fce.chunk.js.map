{"version":3,"sources":["config.js","services/WinnerSheets.js","services/WinnerResult.js","components/Chart2.js","services/sheets.js","services/IplResults.js","components/DisplayResult.js","components/Navbar.js","components/Dashboard.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["CACHE","getSheetsData","sheetId","sheetName","a","storedData","localStorage","getItem","JSON","parse","console","error","cacheKey","cache","CACHE_EXPIRE_TIME_IN_MIN","data","createdAt","Date","now","fetch","headers","response","status","chartData","labels","datasets","chartDataSet","label","backgroundColor","json","feed","entry","length","teamArray","winCount","key","row","startsWith","keyToStore","slice","undefined","push","setItem","stringify","getData","config","Chart2","React","useState","results","setResults","useEffect","getResultData","className","options","title","display","text","fontSize","legend","position","year","cacheDataPerYear","i","season","dataArray","dataArrayPerYear","elem","dataKeys","ResultItem","wonByRun","team1","team2","umpire1","umpire2","umpire3","winner","win_by_runs","win_by_wickets","player_of_match","dl_applied","venue","city","date","toss_winner","toss_decision","result","isTie","makeStyles","theme","root","width","heading","typography","pxToRem","fontWeight","fontWeightRegular","padding","Card","style","Header","as","Body","textAlign","Title","Subtitle","color","Text","icon","faMapMarkedAlt","faCalendarMinus","faRecordVinyl","faUser","Footer","faBaseballBall","DisplayResult","props","match","params","Container","CardDeck","to","marginTop","faArrowLeft","size","map","index","tosswinner","tossdecision","winbyruns","winbywickets","playerofmatch","dlapplied","marginBottom","float","Navbar","exact","Dashboard","ButtonGroup","Button","src","minHeight","frameborder","scrolling","App","path","component","from","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.00f93fce.chunk.js","sourcesContent":["export default {\r\n  resultSheetId: \"1BFVGZyjguGwJOoFtVa2vX1WQbpw6W80G9LpiquX2gK0\",\r\n};\r\n","const STORAGE_KEY = \"sheet_data\";\r\nconst CACHE_EXPIRE_TIME_IN_MIN = 48 * 60;\r\nlet CACHE = {};\r\n\r\n/**\r\n * To get the formatted google sheet data\r\n * @params {String} sheetId The sheet ID to get the data from\r\n * @params {String} sheetName The name of sheet to get data from\r\n */\r\nexport default async function getSheetsData(sheetId, sheetName) {\r\n  const storedData = localStorage.getItem(STORAGE_KEY);\r\n  if (storedData) {\r\n    try {\r\n      CACHE = await JSON.parse(storedData);\r\n    } catch (err) {\r\n      console.error(\"Imporper data in localStorage\");\r\n    }\r\n  }\r\n\r\n  const cacheKey = `${sheetId}-${sheetName}`;\r\n  const cache = CACHE[cacheKey];\r\n  const cacheLife = CACHE_EXPIRE_TIME_IN_MIN * 60 * 1000;\r\n  if (cache && cache.data && cache.createdAt + cacheLife > Date.now()) {\r\n    return cache.data;\r\n  }\r\n\r\n  const response = await fetch(\r\n    `https://spreadsheets.google.com/feeds/list/${sheetId}/${sheetName}/public/values?alt=json`,\r\n    {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }\r\n  );\r\n\r\n  if (response.status >= 400) {\r\n    console.error(\"Sheets API error\");\r\n    return null;\r\n  }\r\n\r\n  var chartData = {\r\n    labels: [],\r\n    datasets: [],\r\n  };\r\n  var chartDataSet = {\r\n    label: \"Win Count\",\r\n    data: [],\r\n    backgroundColor: [\r\n      \"rgba(255, 99, 132, 0.6)\",\r\n      \"rgba(54, 162, 235, 0.6)\",\r\n      \"rgba(255, 206, 86, 0.6)\",\r\n      \"rgba(75, 192, 192, 0.6)\",\r\n      \"rgba(153, 102, 255, 0.6)\",\r\n      \"rgba(255, 159, 64, 0.6)\",\r\n      \"rgba(155, 99, 132, 0.6)\",\r\n      \"rgba(55, 99, 132, 0.6)\",\r\n      \"rgba(54, 122, 235, 0.6)\",\r\n      \"rgba(255, 106, 86, 0.6)\",\r\n      \"rgba(75, 122, 192, 0.6)\",\r\n      \"rgba(153, 102, 155, 0.6)\",\r\n      \"rgba(225, 159, 94, 0.6)\",\r\n      \"rgba(95, 96, 132, 0.6)\",\r\n    ],\r\n  };\r\n\r\n  const data = await response.json();\r\n  if (data && data.feed && data.feed.entry && data.feed.entry.length > 0) {\r\n    let teamArray = [];\r\n    let winCount = [];\r\n    for (const row of data.feed.entry) {\r\n      const elem = {};\r\n      for (const key in row) {\r\n        if (key.startsWith(\"gsx$\")) {\r\n          const keyToStore = key.slice(4);\r\n          if (row[key][\"$t\"] !== undefined) {\r\n            if (keyToStore === \"teams\") {\r\n              teamArray.push(row[key][\"$t\"]);\r\n            } else if (keyToStore === \"wins\") {\r\n              winCount.push(row[key][\"$t\"]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    chartData.labels = teamArray;\r\n\r\n    //chartData.datasets.data = winCount;\r\n    chartDataSet.data = winCount;\r\n    chartData.datasets.push(chartDataSet);\r\n\r\n    CACHE[cacheKey] = {\r\n      data: chartData,\r\n      createdAt: Date.now(),\r\n    };\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(CACHE));\r\n\r\n    return chartData;\r\n  }\r\n  console.error(data);\r\n  return null;\r\n}\r\n","import config from \"../config\";\r\nimport getSheetsData from \"./WinnerSheets\";\r\n\r\nexport const getData = async () => {\r\n  return await getSheetsData(config.resultSheetId, \"2\");\r\n};\r\n\r\nexport const dataKeys = {\r\n  teams: \"Teams\",\r\n  wins: \"Wins\",\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { Bar, Line, Pie, Doughnut } from \"react-chartjs-2\";\r\nimport { getData as getResultData, dataKeys } from \"../services/WinnerResult\";\r\n\r\nfunction Chart2() {\r\n  const [results, setResults] = React.useState([]);\r\n\r\n  React.useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    const data = await getResultData();\r\n\r\n    if (data) {\r\n      setResults(data);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"chart\">\r\n        <div className=\"graph\">\r\n          <Bar\r\n            data={results}\r\n            options={{\r\n              title: {\r\n                display: true,\r\n                text:\r\n                  \"Bar graph representation for the number of times a team has won from 2008-2017\",\r\n                fontSize: 25,\r\n              },\r\n              legend: {\r\n                display: true,\r\n                position: \"bottom\",\r\n              },\r\n            }}\r\n          />\r\n        </div>\r\n        {/* <Line\r\n          data={this.data}\r\n          options={{\r\n            title: {\r\n              display: this.props.displayTitle,\r\n              text: \"Largest Cities In \" + this.props.location,\r\n              fontSize: 25,\r\n            },\r\n            legend: {\r\n              display: this.props.displayLegend,\r\n              position: this.props.legendPosition,\r\n            },\r\n          }}\r\n        />\r\n        */}\r\n        <div className=\"graph\">\r\n          <Pie\r\n            data={results}\r\n            options={{\r\n              title: {\r\n                display: true,\r\n                text:\r\n                  \"Pie Chart representation for the number of times a team has won from 2008-2017\",\r\n                fontSize: 25,\r\n              },\r\n              legend: {\r\n                display: true,\r\n                position: \"bottom\",\r\n              },\r\n            }}\r\n          />\r\n        </div>\r\n        {/*\r\n        <Doughnut\r\n          data={this.data}\r\n          options={{\r\n            title: {\r\n              display: this.props.displayTitle,\r\n              text: \"Largest Cities In \" + this.props.location,\r\n              fontSize: 25,\r\n            },\r\n            legend: {\r\n              display: this.props.displayLegend,\r\n              position: this.props.legendPosition,\r\n            },\r\n          }}\r\n        /> */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart2;\r\n","const STORAGE_KEY = \"sheet_data\";\r\nconst CACHE_EXPIRE_TIME_IN_MIN = 48 * 60;\r\nlet CACHE = {};\r\n\r\n/**\r\n * To get the formatted google sheet data\r\n * @params {String} sheetId The sheet ID to get the data from\r\n * @params {String} sheetName The name of sheet to get data from\r\n */\r\nexport default async function getSheetsData(sheetId, sheetName, year) {\r\n  const storedData = localStorage.getItem(STORAGE_KEY);\r\n  if (storedData) {\r\n    try {\r\n      CACHE = await JSON.parse(storedData);\r\n    } catch (err) {\r\n      console.error(\"Imporper data in localStorage\");\r\n    }\r\n  }\r\n\r\n  const cacheKey = `${sheetId}-${sheetName}`;\r\n  const cache = CACHE[cacheKey];\r\n  const cacheLife = CACHE_EXPIRE_TIME_IN_MIN * 60 * 1000;\r\n  const cacheDataPerYear = [];\r\n  if (cache && cache.data && cache.createdAt + cacheLife > Date.now()) {\r\n    for (const i in cache.data) {\r\n      if (cache.data[i].season === year) {\r\n        cacheDataPerYear.push(cache.data[i]);\r\n      }\r\n    }\r\n    return cacheDataPerYear;\r\n  }\r\n\r\n  const response = await fetch(\r\n    `https://spreadsheets.google.com/feeds/list/${sheetId}/${sheetName}/public/values?alt=json`,\r\n    {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }\r\n  );\r\n\r\n  if (response.status >= 400) {\r\n    console.error(\"Sheets API error\");\r\n    return null;\r\n  }\r\n\r\n  const data = await response.json();\r\n\r\n  if (data && data.feed && data.feed.entry && data.feed.entry.length > 0) {\r\n    const dataArray = [];\r\n    const dataArrayPerYear = [];\r\n    for (const row of data.feed.entry) {\r\n      const elem = {};\r\n      for (const key in row) {\r\n        if (key.startsWith(\"gsx$\")) {\r\n          const keyToStore = key.slice(4);\r\n          if (row[key][\"$t\"] !== undefined) {\r\n            elem[keyToStore] = row[key][\"$t\"];\r\n          } else {\r\n            elem[keyToStore] = row[key];\r\n          }\r\n        }\r\n      }\r\n\r\n      dataArray.push(elem);\r\n    }\r\n    for (const i in dataArray) {\r\n      if (dataArray[i].season === year) {\r\n        dataArrayPerYear.push(dataArray[i]);\r\n      }\r\n    }\r\n    CACHE[cacheKey] = {\r\n      data: dataArray,\r\n      createdAt: Date.now(),\r\n    };\r\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(CACHE));\r\n    return dataArrayPerYear;\r\n  }\r\n  console.error(data);\r\n  return null;\r\n}\r\n","import config from \"../config\";\r\nimport getSheetsData from \"./sheets\";\r\n\r\nexport const getData = async (year) => {\r\n  return await getSheetsData(config.resultSheetId, \"1\", year);\r\n};\r\n\r\nexport const dataKeys = {\r\n  id: \"id\",\r\n  season: \"season\",\r\n  city: \"city\",\r\n  date: \"date\",\r\n  team1: \"team1\",\r\n  team2: \"team2\",\r\n  toss_winner: \"toss_winner\",\r\n  toss_decision: \"toss_decision\",\r\n  result: \"result\",\r\n  dl_applied: \"dl_applied\",\r\n  winner: \"winner\",\r\n  winbyruns: \"win_by_runs\",\r\n  win_by_wickets: \"win_by_wickets\",\r\n  player_of_match: \"player_of_match\",\r\n  venue: \"venue\",\r\n  umpire1: \"umpire1\",\r\n  umpire2: \"umpire2\",\r\n  umpire3: \"umpire3\",\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  getData as getResultData,\r\n  dataKeys,\r\n} from \"../../src/services/IplResults\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\r\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  faBaseballBall,\r\n  faCalendarMinus,\r\n  faMapMarkedAlt,\r\n  faRecordVinyl,\r\n  faUser,\r\n  faArrowLeft,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n//import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  ListGroupItem,\r\n  ListGroup,\r\n  CardDeck,\r\n  Container,\r\n} from \"react-bootstrap\";\r\n// function DisplayResult(props) {\r\n//   const [items, setItems] = React.useState();\r\n//   const [value, setValue] = React.useState();\r\n\r\n//   return (\r\n//     <div>\r\n//       <select\r\n//         value={value}\r\n//         onChange={(e) => YearlyResult(e.currentTarget.value)}\r\n//       >\r\n//         <option value=\"2017\">2017</option>\r\n//         <option value=\"2016\">2016</option>\r\n//         <option value=\"2008\">2008</option>\r\n//       </select>\r\n//       {/* {value && <YearlyResult year={value} />} */}\r\n//     </div>\r\n//   );\r\n// }\r\nfunction DisplayResult(props) {\r\n  const [results, setResults] = React.useState([]);\r\n\r\n  React.useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    const data = await getResultData(props.match.params.year);\r\n\r\n    if (data) {\r\n      setResults(data);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <CardDeck>\r\n        <Link to=\"/Dashboard\">\r\n          <FontAwesomeIcon\r\n            style={{ marginTop: \"20px\" }}\r\n            icon={faArrowLeft}\r\n            size=\"2x\"\r\n            color=\"#00416d\"\r\n          />\r\n        </Link>\r\n        {results.map((elem, index) => {\r\n          return (\r\n            <ResultItem\r\n              key={index}\r\n              team1={elem[dataKeys.team1]}\r\n              team2={elem[dataKeys.team2]}\r\n              city={elem[dataKeys.city]}\r\n              venue={elem[dataKeys.venue]}\r\n              winner={elem[dataKeys.winner]}\r\n              date={elem[dataKeys.date]}\r\n              result={elem[dataKeys.result]}\r\n              toss_winner={elem.tosswinner}\r\n              toss_decision={elem.tossdecision}\r\n              win_by_runs={elem.winbyruns}\r\n              win_by_wickets={elem.winbywickets}\r\n              player_of_match={elem.playerofmatch}\r\n              umpire1={elem[dataKeys.umpire1]}\r\n              umpire2={elem[dataKeys.umpire2]}\r\n              umpire3={elem[dataKeys.umpire3]}\r\n              dl_applied={elem.dlapplied}\r\n            />\r\n          );\r\n        })}\r\n      </CardDeck>\r\n      <Link to=\"/Dashboard\">\r\n        <FontAwesomeIcon\r\n          style={{ marginBottom: \"60px\", float: \"right\" }}\r\n          icon={faArrowLeft}\r\n          size=\"2x\"\r\n          color=\"#00416d\"\r\n        />\r\n      </Link>\r\n    </Container>\r\n  );\r\n}\r\nfunction ResultItem({\r\n  team1,\r\n  team2,\r\n  umpire1,\r\n  umpire2,\r\n  umpire3,\r\n  winner,\r\n  win_by_runs,\r\n  win_by_wickets,\r\n  dl_applied,\r\n  player_of_match,\r\n  venue,\r\n  city,\r\n  date,\r\n  toss_winner,\r\n  toss_decision,\r\n  result,\r\n}) {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: \"100%\",\r\n    },\r\n    heading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n      padding: \"9px 0 9px 0\",\r\n    },\r\n  }));\r\n  let wonByRun;\r\n  let isTie = false;\r\n  if (win_by_runs != 0) {\r\n    wonByRun = true;\r\n  } else {\r\n    wonByRun = false;\r\n  }\r\n  if (result === \"tie\") {\r\n    isTie = true;\r\n  }\r\n  return (\r\n    <span>\r\n      <br />\r\n\r\n      <Card style={{ width: \"21rem\" }}>\r\n        <Card.Header as=\"h5\">\r\n          {team1}\r\n          <br />\r\n          vs\r\n          <br />\r\n          {team2}\r\n        </Card.Header>\r\n        <Card.Body style={{ textAlign: \"left\" }}>\r\n          {!isTie ? <Card.Title>{winner}</Card.Title> : \"\"}\r\n\r\n          <Card.Subtitle>\r\n            {!isTie ? (\r\n              <span style={{ color: \"gray\" }}>\r\n                won the match by\r\n                {wonByRun ? (\r\n                  <span> {win_by_runs} runs</span>\r\n                ) : (\r\n                  <span> {win_by_wickets} wickets</span>\r\n                )}\r\n              </span>\r\n            ) : (\r\n              <Card.Title>Match was a Tie</Card.Title>\r\n            )}\r\n          </Card.Subtitle>\r\n          <hr />\r\n\r\n          <Card.Text>\r\n            <FontAwesomeIcon color=\"#4c4c4c\" icon={faMapMarkedAlt} /> &nbsp;{\" \"}\r\n            {venue}, {city}\r\n          </Card.Text>\r\n          <hr />\r\n          <Card.Text>\r\n            <FontAwesomeIcon color=\"#4c4c4c\" icon={faCalendarMinus} /> &nbsp;{\" \"}\r\n            {date}\r\n          </Card.Text>\r\n          <hr />\r\n          <Card.Text>\r\n            <FontAwesomeIcon color=\"#4c4c4c\" icon={faRecordVinyl} /> &nbsp; Toss\r\n            won by {toss_winner} based on {toss_decision}\r\n          </Card.Text>\r\n          <hr />\r\n          <Card.Text>\r\n            <FontAwesomeIcon color=\"#4c4c4c\" icon={faUser} /> &nbsp;{\" \"}\r\n            <strong>Umpires :</strong>\r\n            <br />\r\n            {umpire1}\r\n            <br />\r\n            {umpire2}\r\n            <br />\r\n            {umpire3}\r\n          </Card.Text>\r\n        </Card.Body>\r\n\r\n        <Card.Footer style={{ textAlign: \"left\" }}>\r\n          <FontAwesomeIcon color=\"#4c4c4c\" icon={faBaseballBall} /> &nbsp;{\" \"}\r\n          <strong>Player of the match :</strong> <br />\r\n          {player_of_match}\r\n        </Card.Footer>\r\n      </Card>\r\n      <br />\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default DisplayResult;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\nimport \"./Card.css\";\r\nexport default function Navbar() {\r\n  return (\r\n    <div className=\"nav-bar\">\r\n      <LinkContainer exact to=\"/\">\r\n        <a>\r\n          <span>Dashboard</span>\r\n        </a>\r\n      </LinkContainer>{\" \"}\r\n      &nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;\r\n      &nbsp;\r\n      <span className=\"vertical-line\"></span>\r\n      <LinkContainer exact to=\"/Dashboard\">\r\n        <a>\r\n          <span>View yearly result</span>\r\n        </a>\r\n      </LinkContainer>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Button, ButtonGroup } from \"react-bootstrap\";\r\nimport { LinkContainer } from \"react-router-bootstrap\";\r\n\r\nimport \"./Card.css\";\r\nexport default function Dashboard() {\r\n  return (\r\n    <div className=\"year-navbar\">\r\n      <h6 style={{ marginBottom: \"15px\" }}>Choose an year</h6>\r\n      <ButtonGroup size=\"mb-2\">\r\n        <LinkContainer exact to=\"/DisplayResult/2008\">\r\n          <Button className=\"btn-theme\">2008</Button>\r\n        </LinkContainer>\r\n        <LinkContainer exact to=\"/DisplayResult/2009\">\r\n          <Button className=\"btn-theme\">2009</Button>\r\n        </LinkContainer>\r\n        <LinkContainer exact to=\"/DisplayResult/2010\">\r\n          <Button className=\"btn-theme\">2010</Button>\r\n        </LinkContainer>\r\n        <LinkContainer exact to=\"/DisplayResult/2011\">\r\n          <Button className=\"btn-theme\">2011</Button>\r\n        </LinkContainer>\r\n        <LinkContainer exact to=\"/DisplayResult/2012\">\r\n          <Button className=\"btn-theme\">2012</Button>\r\n        </LinkContainer>\r\n        <LinkContainer exact to=\"/DisplayResult/2013\">\r\n          <Button className=\"btn-theme\">2013</Button>\r\n        </LinkContainer>\r\n        <LinkContainer exact to=\"/DisplayResult/2014\">\r\n          <Button className=\"btn-theme\">2014</Button>\r\n        </LinkContainer>\r\n        <LinkContainer exact to=\"/DisplayResult/2015\">\r\n          <Button className=\"btn-theme\">2015</Button>\r\n        </LinkContainer>\r\n        <LinkContainer exact to=\"/DisplayResult/2016\">\r\n          <Button className=\"btn-theme\">2016</Button>\r\n        </LinkContainer>\r\n        <LinkContainer exact to=\"/DisplayResult/2017\">\r\n          <Button className=\"btn-theme\">2017</Button>\r\n        </LinkContainer>\r\n      </ButtonGroup>\r\n      <br />\r\n      <br />\r\n      <iframe\r\n        src=\"https://widget.crictimes.org/\"\r\n        style={{ width: \"80%\", minHeight: \"450px\" }}\r\n        frameborder=\"0\"\r\n        scrolling=\"yes\"\r\n      ></iframe>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Chart from \"./components/Chart\";\r\nimport Chart2 from \"./components/Chart2\";\r\nimport DisplayResult from \"./components/DisplayResult\";\r\n\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Dashboard from \"./components/Dashboard\";\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Router>\r\n          <Navbar />\r\n\r\n          <Switch>\r\n            <Route path=\"/\" exact component={Chart2} />\r\n            <Route path=\"/IPL-data-visualization\" exact component={Chart2} />\r\n            <Route path=\"/Dashboard\" exact component={Dashboard} />\r\n            <Route\r\n              path=\"/DisplayResult/:year\"\r\n              exact\r\n              component={DisplayResult}\r\n            />\r\n            <Redirect from=\"*\" to=\"/\"></Redirect>\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}